<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HxCore.Web</name>
    </assembly>
    <members>
        <member name="T:HxCore.Web.Auth.JwtHelper">
            <summary>
            jwt的帮助类
            </summary>
        </member>
        <member name="M:HxCore.Web.Auth.JwtHelper.BuildJwtToken(HxCore.Web.Auth.JwtModel)">
            <summary>
            获取基于JWT的Token
            </summary>
            <param name="model">模型</param>
            <returns></returns>
        </member>
        <member name="M:HxCore.Web.Auth.JwtHelper.IssueJwt(HxCore.Web.Auth.JwtModel)">
            <summary>
            颁发jwt字符串
            </summary>
            <param name="model">jwt实体类</param>
            <returns>token字符串</returns>
        </member>
        <member name="M:HxCore.Web.Auth.JwtHelper.SerializeJwt(System.String)">
            <summary>
            序列化jwt字符串
            </summary>
            <param name="jwtStr">jwt字符串</param>
            <returns>序列化后的jwt实体类</returns>
        </member>
        <member name="T:HxCore.Web.Auth.JwtSettings">
            <summary>
            jwt的配置
            </summary>
        </member>
        <member name="P:HxCore.Web.Auth.JwtSettings.Issuer">
            <summary>
            谁颁发的jwt
            </summary>
        </member>
        <member name="P:HxCore.Web.Auth.JwtSettings.Audience">
            <summary>
            谁使用这个jwt
            </summary>
        </member>
        <member name="P:HxCore.Web.Auth.JwtSettings.SecretKey">
            <summary>
            secret是保存在服务器端的，jwt的前发声明也是在服务器端的，secret就是用来进行jwt的
            签发和jwt的验证，所以他就是你服务器端的私钥，在任何场景都不应该流露出去。
            一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了
            通过jwt header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分
            </summary>
        </member>
        <member name="T:HxCore.Web.Auth.JwtModel">
            <summary>
            jwt的模型
            </summary>
        </member>
        <member name="P:HxCore.Web.Auth.JwtModel.UserId">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:HxCore.Web.Auth.JwtModel.UserName">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:HxCore.Web.Auth.JwtModel.NickName">
            <summary>
            昵称
            </summary>
        </member>
        <member name="P:HxCore.Web.Auth.JwtModel.IsAdmin">
             <summary>
            是否是管理员
             </summary>
        </member>
        <member name="P:HxCore.Web.Auth.JwtModel.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:HxCore.Web.Auth.JwtModel.Expiration">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="T:HxCore.Web.Auth.JwtToken">
            <summary>
            JwtToken
            </summary>
        </member>
        <member name="M:HxCore.Web.Auth.JwtToken.BuildJwtToken(System.Collections.Generic.List{System.Security.Claims.Claim},HxCore.Web.Auth.PermissionRequirement)">
            <summary>
            获取基于JWT的Token
            </summary>
            <param name="claims">需要在登陆的时候配置</param>
            <param name="model">在startup中定义的参数</param>
            <returns></returns>
        </member>
        <member name="T:HxCore.Web.Auth.PermissionHandler">
            <summary>
            权限授权处理器
            </summary>
        </member>
        <member name="P:HxCore.Web.Auth.PermissionHandler.Schemes">
            <summary>
            验证方案提供对象
            </summary>
        </member>
        <member name="M:HxCore.Web.Auth.PermissionHandler.#ctor(Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider,HxCore.Common.IUserContext)">
            <summary>
            构造函数注入
            </summary>
            <param name="schemes"></param>
            <param name="userContext"></param>
        </member>
        <member name="M:HxCore.Web.Auth.PermissionHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,HxCore.Web.Auth.PermissionRequirement)">
            <summary>
            // 重载异步处理程序
            </summary>
            <param name="context">上下文</param>
            <param name="requirement">对象</param>
            <returns></returns>
        </member>
        <member name="T:HxCore.Web.Auth.PermissionRequirement">
            <summary>
            必要参数类，类似一个订单信息
            继承 IAuthorizationRequirement，用于设计自定义权限处理器PermissionHandler
            因为AuthorizationHandler 中的泛型参数 TRequirement 必须继承 IAuthorizationRequirement
            </summary>
        </member>
        <member name="P:HxCore.Web.Auth.PermissionRequirement.Roles">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:HxCore.Web.Auth.PermissionRequirement.DeniedAction">
            <summary>
            无权限action
            </summary>
        </member>
        <member name="P:HxCore.Web.Auth.PermissionRequirement.ClaimType">
            <summary>
            认证授权类型
            </summary>
        </member>
        <member name="P:HxCore.Web.Auth.PermissionRequirement.LoginPath">
            <summary>
            请求路径
            </summary>
        </member>
        <member name="P:HxCore.Web.Auth.PermissionRequirement.Issuer">
            <summary>
            发行人
            </summary>
        </member>
        <member name="P:HxCore.Web.Auth.PermissionRequirement.Audience">
            <summary>
            订阅人
            </summary>
        </member>
        <member name="P:HxCore.Web.Auth.PermissionRequirement.Expiration">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:HxCore.Web.Auth.PermissionRequirement.SigningCredentials">
            <summary>
            签名验证
            </summary>
        </member>
        <member name="M:HxCore.Web.Auth.PermissionRequirement.#ctor(System.String,System.String,System.String,System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,System.TimeSpan)">
            <summary>
            构造
            </summary>
            <param name="deniedAction">拒约请求的url</param>
            <param name="claimType">声明类型</param>
            <param name="issuer">发行人</param>
            <param name="audience">订阅人</param>
            <param name="signingCredentials">签名验证实体</param>
            <param name="expiration">过期时间</param>
        </member>
        <member name="T:HxCore.Web.AutoMapper.MyMapperProfile">
            <summary>
            automapper配置文件
            </summary>
        </member>
        <member name="M:HxCore.Web.AutoMapper.MyMapperProfile.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:HxCore.Web.AutoMapper.AutoMapperConfig">
            <summary>
            静态全局 AutoMapper 配置文件
            </summary>
        </member>
        <member name="M:HxCore.Web.AutoMapper.AutoMapperConfig.RegisterMappings">
            <summary>
            注册
            </summary>
            <returns></returns>
        </member>
        <member name="T:HxCore.Web.Common.ConstInfo">
            <summary>
            常量
            </summary>
        </member>
        <member name="F:HxCore.Web.Common.ConstInfo.CookieName">
            <summary>
            cookie中存储的名字
            </summary>
        </member>
        <member name="F:HxCore.Web.Common.ConstInfo.CacheKeyCookieName">
            <summary>
            缓存中存储的名字
            </summary>
        </member>
        <member name="F:HxCore.Web.Common.ConstInfo.SessionID">
            <summary>
            用来模拟session的标志
            </summary>
        </member>
        <member name="F:HxCore.Web.Common.ConstInfo.VCode">
            <summary>
            验证码存储在Session中的标志
            </summary>
        </member>
        <member name="F:HxCore.Web.Common.ConstInfo.UploadPath">
            <summary>
            文件上传时根目录
            </summary>
        </member>
        <member name="F:HxCore.Web.Common.ConstInfo.maxLength">
            <summary>
            最大上传文件大小
            </summary>
        </member>
        <member name="F:HxCore.Web.Common.ConstInfo.returnUrl">
            <summary>
            返回连接
            </summary>
        </member>
        <member name="F:HxCore.Web.Common.ConstInfo.systemConfig">
            <summary>
            系统配置
            </summary>
        </member>
        <member name="F:HxCore.Web.Common.ConstInfo.carouselPath">
            <summary>
            轮播图存放的文件
            </summary>
        </member>
        <member name="F:HxCore.Web.Common.ConstInfo.thumbPath">
            <summary>
            缩略图存放的文件
            </summary>
        </member>
        <member name="F:HxCore.Web.Common.ConstInfo.SystemPolicy">
            <summary>
            系统策略
            </summary>
        </member>
        <member name="F:HxCore.Web.Common.ConstInfo.ClientPolicy">
            <summary>
            客户端
            </summary>
        </member>
        <member name="F:HxCore.Web.Common.ConstInfo.AdminPolicy">
            <summary>
            管理员
            </summary>
        </member>
        <member name="F:HxCore.Web.Common.ConstInfo.PermissionPolicy">
            <summary>
            PermissionPolicy
            </summary>
        </member>
        <member name="F:HxCore.Web.Common.ConstInfo.RoutePrefix">
            <summary>
            路有前缀
            </summary>
        </member>
        <member name="T:HxCore.Web.Common.RuntimeHelper">
            <summary>
            运行时的帮助类
            </summary>
        </member>
        <member name="M:HxCore.Web.Common.RuntimeHelper.GetAllAssembly">
            <summary>
            获取所有的程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.Web.Common.RuntimeHelper.GetAssembly(System.String)">
            <summary>
            获取指定程序集名称的程序集
            </summary>
            <param name="assemblyName">程序集的全名</param>
            <returns></returns>
        </member>
        <member name="T:HxCore.Web.Controllers.AccountController">
            <summary>
            账户相关的控制器类
            </summary>
        </member>
        <member name="F:HxCore.Web.Controllers.AccountController._userService">
            <summary>
            用户服务类
            </summary>
        </member>
        <member name="M:HxCore.Web.Controllers.AccountController.#ctor(HxCore.IServices.IUserInfoService)">
            <summary>
            构造函数
            </summary>
            <param name="userService"></param>
        </member>
        <member name="M:HxCore.Web.Controllers.AccountController.Login(HxCore.Model.ViewModels.LoginParam)">
            <summary>
            用户登录
            </summary>
            <param name="param">密码</param>
            <returns></returns>
        </member>
        <member name="M:HxCore.Web.Controllers.AccountController.RefreshToken(System.String)">
            <summary>
            用户登录
            </summary>
            <param name="token">旧的token</param>
            <returns></returns>
        </member>
        <member name="T:HxCore.Web.Controllers.AttachController">
            <summary>
            附件控制器
            </summary>
        </member>
        <member name="M:HxCore.Web.Controllers.AttachController.#ctor(HxCore.Common.WebManager)">
            <summary>
            构造函数
            </summary>
            <param name="webManager"></param>
        </member>
        <member name="M:HxCore.Web.Controllers.AttachController.Upload(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            附件上传
            </summary>
            <param name="file">上传的文件</param>
            <returns></returns>
        </member>
        <member name="M:HxCore.Web.Controllers.AttachController.GetMdTemplate">
            <summary>
            获取md编辑器的模板内容
            </summary>
            <returns></returns>
        </member>
        <member name="T:HxCore.Web.Controllers.BaseApiController">
            <summary>
            基础的api
            </summary>
        </member>
        <member name="P:HxCore.Web.Controllers.BaseApiController.Mapper">
            <summary>
            automapper
            </summary>
        </member>
        <member name="P:HxCore.Web.Controllers.BaseApiController.Db">
            <summary>
            automapper
            </summary>
        </member>
        <member name="M:HxCore.Web.Controllers.BaseApiController.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HxCore.Web.Controllers.BaseApiController.#ctor(AutoMapper.IMapper,HxCore.Entity.Context.IDbSession)">
            <summary>
            构造函数
            </summary>
            <param name="mapper"></param>
            <param name="dbSession"></param>
        </member>
        <member name="T:HxCore.Web.Controllers.BaseAuthApiController">
            <summary>
            客户端使用的api
            </summary>
        </member>
        <member name="T:HxCore.Web.Controllers.BlogController">
            <summary>
            博客相关的控制器类
            </summary>
        </member>
        <member name="M:HxCore.Web.Controllers.BlogController.#ctor(HxCore.IServices.IBlogService)">
             <summary>
            构造函数
             </summary>
             <param name="_blogService"></param>
        </member>
        <member name="M:HxCore.Web.Controllers.BlogController.QueryBlogList">
            <summary>
            获取博客列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.Web.Controllers.BlogController.QueryTagList">
            <summary>
            获取博客列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.Web.Controllers.BlogController.FindById(System.String,System.Int64)">
            <summary>
            根据博客id获取博客信息
            </summary>
            <param name="userName">当前博客所属用户</param>
            <param name="id">博客id</param>
            <returns></returns>
        </member>
        <member name="M:HxCore.Web.Controllers.BlogController.Save(HxCore.Model.BlogCreateModel)">
            <summary>
            博客的编辑
            </summary>
            <param name="editInfo"></param>
            <returns></returns>
        </member>
        <member name="T:HxCore.Web.Controllers.EnumController">
            <summary>
            枚举的控制器
            </summary>
        </member>
        <member name="M:HxCore.Web.Controllers.EnumController.#ctor(HxCore.Entity.Context.IDbSession)">
            <summary>
            构造函数
            </summary>
            <param name="dbSession"></param>
        </member>
        <member name="M:HxCore.Web.Controllers.EnumController.GetBlogTypeList">
            <summary>
            获取博客类型的列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:HxCore.Web.Controllers.EnumController.GetCategoryList">
            <summary>
            获取博客类型的列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:HxCore.Web.Extensions.AuthorizeSetup">
            <summary>
            权限启动服务注册
            </summary>
        </member>
        <member name="M:HxCore.Web.Extensions.AuthorizeSetup.AddAuthorizeSetup(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加权限
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:HxCore.Web.Extensions.AutoMapperSetup">
            <summary>
            autoMapper启动类
            </summary>
        </member>
        <member name="M:HxCore.Web.Extensions.AutoMapperSetup.AddAutoMapperSetup(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加数据库上下文
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="T:HxCore.Web.Extensions.DateTimeConverter">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:HxCore.Web.Extensions.DateTimeConverter.DateTimeFormat">
            <summary>
            获取或设置DateTime格式
            <para>默认为: yyyy-MM-dd HH:mm:ss</para>
            </summary>           
        </member>
        <member name="M:HxCore.Web.Extensions.DateTimeConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:HxCore.Web.Extensions.DateTimeConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTime,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:HxCore.Web.Extensions.DateTimeNullConverter">
            <summary>
            可空的时间
            </summary>
        </member>
        <member name="P:HxCore.Web.Extensions.DateTimeNullConverter.DateTimeFormat">
            <summary>
             获取或设置DateTime格式
             <para>默认为: yyyy-MM-dd HH:mm:ss</para>
            </summary>
        </member>
        <member name="M:HxCore.Web.Extensions.DateTimeNullConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:HxCore.Web.Extensions.DateTimeNullConverter.Write(System.Text.Json.Utf8JsonWriter,System.Nullable{System.DateTime},System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:HxCore.Web.Extensions.DbSetup">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="M:HxCore.Web.Extensions.DbSetup.AddDbSetup(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加数据库上下文
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="T:HxCore.Web.Extensions.ServicesExtension">
            <summary>
            服务的扩展
            </summary>
        </member>
        <member name="M:HxCore.Web.Extensions.ServicesExtension.AddDIServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            使用自带的依赖注入注入服务类
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:HxCore.Web.Extensions.ServicesExtension.AddDIRepository(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            使用自带的依赖注入注入仓库类
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:HxCore.Web.Extensions.ServicesExtension.DIServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            依赖注入
            </summary>
            <param name="services">服务描述集合</param>
            <param name="dllName">程序集dll</param>
        </member>
        <member name="T:HxCore.Web.Extensions.SwaggerSetup">
            <summary>
            Swagger 启动服务
            </summary>
        </member>
        <member name="M:HxCore.Web.Extensions.SwaggerSetup.AddSwaggerSetup(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加Swagger
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:HxCore.Web.Extensions.SwaggerSetup.UseSwaggerSetup(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用Swagger
            </summary>
            <param name="app"></param>
        </member>
        <member name="T:HxCore.Web.Filter.ApiResultAttribute">
            <summary>
            返回结果统一处理
            </summary>
        </member>
        <member name="M:HxCore.Web.Filter.ApiResultAttribute.OnResultExecuting(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext)">
            <summary>
            重载结果处理
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:HxCore.Web.Filter.ExceptionFilter">
            <summary>
            异常过滤器
            </summary>
        </member>
        <member name="M:HxCore.Web.Filter.ExceptionFilter.#ctor(Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Logging.ILogger{HxCore.Web.Filter.ExceptionFilter})">
            <summary>
            构造函数
            </summary>
            <param name="env">环境</param>
            <param name="logger">日志记录</param>
        </member>
        <member name="M:HxCore.Web.Filter.ExceptionFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            处理异常
            </summary>
            <param name="context">异常上下文</param>
        </member>
        <member name="M:HxCore.Web.Filter.ExceptionFilter.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            异步异常的处理
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:HxCore.Web.Filter.ExceptionFilter.WriteLog(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            写入日志（log4net）
            <param name="context">提供使用</param>
            </summary>
        </member>
        <member name="T:HxCore.Web.Filter.GlobalRouteConvention">
            <summary>
            全局路由公约
            </summary>
        </member>
        <member name="M:HxCore.Web.Filter.GlobalRouteConvention.#ctor(Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider)">
            <summary>
            全局路由公约
            </summary>
            <param name="routeTemplateProvider"></param>
        </member>
        <member name="M:HxCore.Web.Filter.GlobalRouteConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel)">
            <summary>
            应用
            </summary>
            <param name="application"></param>
        </member>
        <member name="T:HxCore.Web.Middlewares.JwtTokenAuth">
            <summary>
            jwt中间件
            </summary>
        </member>
        <member name="M:HxCore.Web.Middlewares.JwtTokenAuth.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            构造函数
            </summary>
            <param name="next">下一个管道</param>
        </member>
        <member name="M:HxCore.Web.Middlewares.JwtTokenAuth.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            执行
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:HxCore.Web.Middlewares.MiddleWareExtension">
            <summary>
            中间件扩展
            </summary>
        </member>
        <member name="M:HxCore.Web.Middlewares.MiddleWareExtension.UseJwtTokenAuth(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用jwt授权
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:HxCore.Web.Middlewares.MiddleWareExtension.AddGlobalRoutePrefix(Microsoft.AspNetCore.Mvc.MvcOptions,Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider)">
            <summary>
            使用全局路由前缀设置
            </summary>
            <param name="opts"></param>
            <param name="routeAttribute"></param>
        </member>
        <member name="M:HxCore.Web.Middlewares.MiddleWareExtension.AddFilters(Microsoft.AspNetCore.Mvc.MvcOptions,System.Type[])">
            <summary>
            使用过滤器
            </summary>
            <param name="opts"></param>
            <param name="types"></param>
        </member>
        <member name="T:HxCore.Web.Program">
            <summary>
            主程序
            </summary>
        </member>
        <member name="M:HxCore.Web.Program.Main(System.String[])">
            <summary>
            主函数
            </summary>
            <param name="args">参数</param>
        </member>
        <member name="M:HxCore.Web.Program.CreateHostBuilder(System.String[])">
            <summary>
            创建Host
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:HxCore.Web.Startup">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:HxCore.Web.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            构造函数
            </summary>
            <param name="configuration">配置</param>
            <param name="_env">环境</param>
        </member>
        <member name="M:HxCore.Web.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            服务
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:HxCore.Web.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            配置
            </summary>
            <param name="app"></param>
        </member>
        <member name="T:HxCore.Web.SwaggerHelper.ApiVersions">
            <summary>
            api Swagger版本
            </summary>
        </member>
        <member name="F:HxCore.Web.SwaggerHelper.ApiVersions.V1">
            <summary>
            V1 版本
            </summary>
        </member>
        <member name="F:HxCore.Web.SwaggerHelper.ApiVersions.V2">
            <summary>
            V2 版本
            </summary>
        </member>
    </members>
</doc>
